plugins {
    id "de.undercouch.download" version "3.4.3"
}

apply plugin: "org.jetbrains.kotlin.multiplatform"

final def libuiVersion = 'alpha4.1'

task downloadArchive(type: Download) {
    def release = "https://github.com/andlabs/libui/releases/download/$libuiVersion/libui-$libuiVersion"
    if (os.isWindows()) {
        src "$release-windows-amd64-mingw-static.zip"
    } else if (os.isLinux()) {
        src "$release-linux-amd64-static.tgz"
    } else if (os.isMacOsX()) {
        src "$release-darwin-amd64-static.tgz"
    }
    dest new File(buildDir, "libui-$libuiVersion.${os.isWindows() ? "zip" : "tgz"}")
    overwrite false
}

task unpackArchive(dependsOn: downloadArchive, type: Copy) {
    if (os.isWindows()) {
        from zipTree(downloadArchive.dest)
    } else {
        from tarTree(resources.gzip(downloadArchive.dest))
    }
    into buildDir
}

kotlin {
    targets {
        if (os.isWindows()) {
            fromPreset(presets.mingwX64, 'windows') {
                compilations.main.cinterops {
                    libui { includeDirs buildDir }
                }
            }
        } else if (os.isLinux()) {
            fromPreset(presets.linuxX64, 'linux') {
                compilations.main.cinterops {
                    libui { includeDirs buildDir }
                }
            }
        } else if (os.isMacOsX()) {
            fromPreset(presets.macosX64, 'macosx') {
                compilations.main.cinterops {
                    libui { includeDirs buildDir }
                }
            }
        }
    }

    sourceSets {
        windowsMain {
            kotlin.srcDir('src/nativeMain/kotlin')
        }
        linuxMain {
            kotlin.srcDir('src/nativeMain/kotlin')
        }
        macosxMain {
            kotlin.srcDir('src/nativeMain/kotlin')
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.CInteropProcess).all {
    dependsOn unpackArchive
}
