plugins {
    id "de.undercouch.download" version "3.4.3"
}

apply plugin: "org.jetbrains.kotlin.multiplatform"

apply plugin: 'maven-publish'

group = GROUP
version = VERSION_NAME

task downloadArchive(type: Download) {
    def release = "https://github.com/andlabs/libui/releases/download/$LIBUI_VERSION/libui-$LIBUI_VERSION"
    if (os.isWindows()) {
        src "$release-windows-amd64-mingw-static.zip"
    } else if (os.isLinux()) {
        src "$release-linux-amd64-static.tgz"
    } else if (os.isMacOsX()) {
        src "$release-darwin-amd64-static.tgz"
    }
    dest new File(buildDir, "libui-$LIBUI_VERSION.${os.isWindows() ? "zip" : "tgz"}")
    overwrite false
}

task unpackArchive(dependsOn: downloadArchive, type: Copy) {
    if (os.isWindows()) {
        from zipTree(downloadArchive.dest)
    } else {
        from tarTree(resources.gzip(downloadArchive.dest))
    }
    into buildDir
}

kotlin {
    targets {
        if (os.isWindows()) {
            fromPreset(presets.mingwX64, 'windows') {
                compilations.main.cinterops {
                    libui { includeDirs buildDir }
                }
            }
        } else if (os.isLinux()) {
            fromPreset(presets.linuxX64, 'linux') {
                compilations.main.cinterops {
                    libui { includeDirs buildDir }
                }
            }
        } else if (os.isMacOsX()) {
            fromPreset(presets.macosX64, 'macosx') {
                compilations.main.cinterops {
                    libui { includeDirs buildDir }
                }
            }
        }
    }

    sourceSets {
        windowsMain {
            kotlin.srcDir('src/nativeMain/kotlin')
        }
        linuxMain {
            kotlin.srcDir('src/nativeMain/kotlin')
        }
        macosxMain {
            kotlin.srcDir('src/nativeMain/kotlin')
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.CInteropProcess).all {
    dependsOn unpackArchive
}

afterEvaluate {
    project.publishing.publications.forEach { publication ->
        publication.pom.withXml {
            def root = asNode()
            root.appendNode('name', POM_NAME)
            root.appendNode('description', POM_DESCRIPTION)
            root.appendNode('url', POM_URL)
            root.children().last() + {
                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_SCM_URL
                        distribution POM_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id "msink"
                        name "Mike Sinkovsky"
                        email "msink@permonline.ru"
                    }
                }
                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }
            }
        }
    }
}

publishing {
    repositories {
        maven { url = "file://$rootDir/.m2-local" }
    }
}
